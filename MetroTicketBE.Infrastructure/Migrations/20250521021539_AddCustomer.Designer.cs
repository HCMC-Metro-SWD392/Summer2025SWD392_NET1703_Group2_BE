// <auto-generated />
using System;
using MetroTicketBE.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetroTicketBE.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250521021539_AddCustomer")]
    partial class AddCustomer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetroTicket.Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("LogTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LogTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.LogType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogTypes");
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityId")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.CustomerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CallToActionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FooterContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalizationTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreheaderText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubjectLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FormRequestTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormRequestTypeId");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("FormRequests");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormRequestType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FormRequestType");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PointToRedeem")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PayOSMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<string>("CancelUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReturnUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<long>("TransactionNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("StatusId");

                    b.ToTable("PayOSMethods");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StationCheckInId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StationCheckOutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StationCheckInId");

                    b.HasIndex("StationCheckOutId");

                    b.HasIndex("StatusId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.SubscriptionTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("SubscriptionTicket");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Expiration")
                        .HasColumnType("interval");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SubscriptionTicketId")
                        .HasColumnType("uuid");

                    b.Property<long>("TicketNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SubscriptionTicketId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FirstStationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LastStationId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FirstStationId");

                    b.HasIndex("LastStationId");

                    b.ToTable("TicketRoutes");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TimeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("TrainSegmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TrainSegmentId");

                    b.ToTable("TimeLines");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("LoadCapacity")
                        .HasColumnType("double precision");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TimeLineId")
                        .HasColumnType("uuid");

                    b.Property<int>("TrainCarQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("TrainCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TimeLineId");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TrainSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<Guid>("StationEndId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StationStartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StationEndId");

                    b.HasIndex("StationStartId");

                    b.HasIndex("TrainId");

                    b.ToTable("TimeLine");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedById")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PromotionTransaction", b =>
                {
                    b.Property<Guid>("PromotionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionsId")
                        .HasColumnType("uuid");

                    b.HasKey("PromotionsId", "TransactionsId");

                    b.HasIndex("TransactionsId");

                    b.ToTable("PromotionTransaction");
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.Log", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.LogType", "LogType")
                        .WithMany("Logs")
                        .HasForeignKey("LogTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");

                    b.Navigation("LogType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Membership", "Membership")
                        .WithMany("Customers")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("MetroTicketBE.Domain.Entities.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerType");

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Status", "Status")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.User", null)
                        .WithMany("EmailTemplates")
                        .HasForeignKey("UserId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormRequest", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.FormRequestType", "FormRequestType")
                        .WithMany("FormRequests")
                        .HasForeignKey("FormRequestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.User", "Reviewer")
                        .WithMany("FormRequestsAsReviewers")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.User", "Sender")
                        .WithMany("FormRequestsAsSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Status", "Status")
                        .WithMany("FormRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormRequestType");

                    b.Navigation("Reviewer");

                    b.Navigation("Sender");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PayOSMethod", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PayOSMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Status", "Status")
                        .WithMany("PayOSMethods")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Process", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StationCheckIn")
                        .WithMany("CheckInProcesses")
                        .HasForeignKey("StationCheckInId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StationCheckOut")
                        .WithMany("CheckOutProcesses")
                        .HasForeignKey("StationCheckOutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Status", "Status")
                        .WithMany("Processes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StationCheckIn");

                    b.Navigation("StationCheckOut");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.SubscriptionTicket", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Status", null)
                        .WithMany("SubscriptionTickets")
                        .HasForeignKey("StatusId");

                    b.HasOne("MetroTicketBE.Domain.Entities.TicketType", "TicketType")
                        .WithMany("SubscriptionTickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Process", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ProcessId");

                    b.HasOne("MetroTicketBE.Domain.Entities.TicketRoute", "Route")
                        .WithMany("Tickets")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.SubscriptionTicket", "SubscriptionTicket")
                        .WithMany("Tickets")
                        .HasForeignKey("SubscriptionTicketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MetroTicketBE.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Tickets")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("SubscriptionTicket");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketRoute", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "FirstStation")
                        .WithMany("TicketRoutesAsFirstStation")
                        .HasForeignKey("FirstStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "LastStation")
                        .WithMany("TicketRoutesAsLastStation")
                        .HasForeignKey("LastStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstStation");

                    b.Navigation("LastStation");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TimeLine", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.TrainSegment", "TrainSegment")
                        .WithMany("TimeLines")
                        .HasForeignKey("TrainSegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TrainSegment");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Train", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Status", "Status")
                        .WithMany("Trains")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.TimeLine", null)
                        .WithMany("Trains")
                        .HasForeignKey("TimeLineId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TrainSegment", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StationEnd")
                        .WithMany("AsEnd")
                        .HasForeignKey("StationEndId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StationStart")
                        .WithMany("AsStart")
                        .HasForeignKey("StationStartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Train", "Train")
                        .WithMany("TrainSegments")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StationEnd");

                    b.Navigation("StationStart");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.PaymentMethod", null)
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Status", "Status")
                        .WithMany("Transactions")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PromotionTransaction", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Promotion", null)
                        .WithMany()
                        .HasForeignKey("PromotionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.LogType", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.User", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("EmailTemplates");

                    b.Navigation("FormRequestsAsReviewers");

                    b.Navigation("FormRequestsAsSenders");

                    b.Navigation("Logs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormRequestType", b =>
                {
                    b.Navigation("FormRequests");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Membership", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PayOSMethods");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Process", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Station", b =>
                {
                    b.Navigation("AsEnd");

                    b.Navigation("AsStart");

                    b.Navigation("CheckInProcesses");

                    b.Navigation("CheckOutProcesses");

                    b.Navigation("TicketRoutesAsFirstStation");

                    b.Navigation("TicketRoutesAsLastStation");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Status", b =>
                {
                    b.Navigation("EmailTemplates");

                    b.Navigation("FormRequests");

                    b.Navigation("PayOSMethods");

                    b.Navigation("Processes");

                    b.Navigation("SubscriptionTickets");

                    b.Navigation("Trains");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.SubscriptionTicket", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketRoute", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketType", b =>
                {
                    b.Navigation("SubscriptionTickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TimeLine", b =>
                {
                    b.Navigation("Trains");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Train", b =>
                {
                    b.Navigation("TrainSegments");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TrainSegment", b =>
                {
                    b.Navigation("TimeLines");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
