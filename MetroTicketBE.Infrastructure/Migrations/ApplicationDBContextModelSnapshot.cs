// <auto-generated />
using System;
using MetroTicketBE.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetroTicketBE.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetroTicket.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityId")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LogType")
                        .HasColumnType("integer");

                    b.Property<Guid>("LogTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CustomerType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<long>("Points")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan?>("StudentExpiration")
                        .HasColumnType("interval");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.EmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("BodyContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CallToActionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FooterContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalizationTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreheaderText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SubjectLine")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FareRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Fare")
                        .HasColumnType("integer");

                    b.Property<double>("MaxDistance")
                        .HasColumnType("double precision");

                    b.Property<double>("MinDistance")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("FareRules");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FormRequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FormRequestId");

                    b.ToTable("FormAttachment");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FormRequestType")
                        .HasColumnType("integer");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReviewerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SenderId");

                    b.ToTable("FormRequests");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MembershipType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PointToRedeem")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.MetroLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EndStationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FareRuleId")
                        .HasColumnType("uuid");

                    b.Property<int>("MetroLineNumber")
                        .HasColumnType("integer");

                    b.Property<string>("MetroName")
                        .HasColumnType("text");

                    b.Property<Guid>("StartStationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EndStationId");

                    b.HasIndex("FareRuleId");

                    b.HasIndex("StartStationId");

                    b.ToTable("MetroLines");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.MetroLineStation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("DistanceFromStart")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MetroLineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uuid");

                    b.Property<int>("StationOder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MetroLineId");

                    b.HasIndex("StationId");

                    b.ToTable("MetroLineStations");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PayOSMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<string>("CancelUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReturnUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<long>("TransactionNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PayOSMethods");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StationCheckInId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StationCheckOutId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StationCheckInId");

                    b.HasIndex("StationCheckOutId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.StaffSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("WorkingDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffSchedules");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.StaffShift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("StaffShifts");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.SubscriptionTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("SubscriptionTicket");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Expiration")
                        .HasColumnType("interval");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SubscriptionTicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TicketRouteId")
                        .HasColumnType("uuid");

                    b.Property<string>("TicketSerial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("SubscriptionTicketId");

                    b.HasIndex("TicketRouteId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstStationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LastStationId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("FirstStationId");

                    b.HasIndex("LastStationId");

                    b.ToTable("TicketRoutes");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Train", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("LoadCapacity")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TrainCarQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("TrainCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TrainSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StartStationId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TrainId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StartStationId");

                    b.ToTable("StrainSchedules");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Status")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrainScheduleWithTrain", b =>
                {
                    b.Property<Guid>("TrainId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrainScheduleId")
                        .HasColumnType("uuid");

                    b.HasKey("TrainId", "TrainScheduleId");

                    b.HasIndex("TrainScheduleId");

                    b.ToTable("TrainScheduleWithTrain", (string)null);
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.Log", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Customer", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Membership", "Membership")
                        .WithMany("Customers")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.EmailTemplate", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", null)
                        .WithMany("EmailTemplates")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormAttachment", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.FormRequest", "FormRequest")
                        .WithMany("FormAttachments")
                        .HasForeignKey("FormRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormRequest");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormRequest", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", "Reviewer")
                        .WithMany("FormRequestsAsReviewers")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", "Sender")
                        .WithMany("FormRequestsAsSenders")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.MetroLine", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "EndStation")
                        .WithMany("EndStations")
                        .HasForeignKey("EndStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.FareRule", "FareRule")
                        .WithMany("MetroLines")
                        .HasForeignKey("FareRuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StartStation")
                        .WithMany("StartStations")
                        .HasForeignKey("StartStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndStation");

                    b.Navigation("FareRule");

                    b.Navigation("StartStation");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.MetroLineStation", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.MetroLine", "MetroLine")
                        .WithMany("MetroLineStations")
                        .HasForeignKey("MetroLineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "Station")
                        .WithMany("MetroLineStations")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MetroLine");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PayOSMethod", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PayOSMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Process", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StationCheckIn")
                        .WithMany("CheckInProcesses")
                        .HasForeignKey("StationCheckInId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StationCheckOut")
                        .WithMany("CheckOutProcesses")
                        .HasForeignKey("StationCheckOutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StationCheckIn");

                    b.Navigation("StationCheckOut");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Staff", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.StaffSchedule", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.StaffShift", "Shift")
                        .WithMany("StaffSchedules")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Staff", "Staff")
                        .WithMany("StaffSchedules")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.SubscriptionTicket", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.TicketType", "TicketType")
                        .WithMany("SubscriptionTickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Process", null)
                        .WithMany("Tickets")
                        .HasForeignKey("ProcessId");

                    b.HasOne("MetroTicketBE.Domain.Entities.SubscriptionTicket", "SubscriptionTicket")
                        .WithMany("Tickets")
                        .HasForeignKey("SubscriptionTicketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MetroTicketBE.Domain.Entities.TicketRoute", "TicketRoute")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Transaction", "Transaction")
                        .WithMany("Tickets")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubscriptionTicket");

                    b.Navigation("TicketRoute");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketRoute", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "FirstStation")
                        .WithMany("TicketRoutesAsFirstStation")
                        .HasForeignKey("FirstStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "LastStation")
                        .WithMany("TicketRoutesAsLastStation")
                        .HasForeignKey("LastStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FirstStation");

                    b.Navigation("LastStation");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TrainSchedule", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Station", "StartStation")
                        .WithMany("StrainSchedules")
                        .HasForeignKey("StartStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StartStation");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.PaymentMethod", null)
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.Promotion", "Promotion")
                        .WithMany("Transactions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MetroTicket.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainScheduleWithTrain", b =>
                {
                    b.HasOne("MetroTicketBE.Domain.Entities.Train", null)
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketBE.Domain.Entities.TrainSchedule", null)
                        .WithMany()
                        .HasForeignKey("TrainScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MetroTicket.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("EmailTemplates");

                    b.Navigation("FormRequestsAsReviewers");

                    b.Navigation("FormRequestsAsSenders");

                    b.Navigation("Logs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FareRule", b =>
                {
                    b.Navigation("MetroLines");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.FormRequest", b =>
                {
                    b.Navigation("FormAttachments");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Membership", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.MetroLine", b =>
                {
                    b.Navigation("MetroLineStations");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PayOSMethods");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Process", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Staff", b =>
                {
                    b.Navigation("StaffSchedules");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.StaffShift", b =>
                {
                    b.Navigation("StaffSchedules");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Station", b =>
                {
                    b.Navigation("CheckInProcesses");

                    b.Navigation("CheckOutProcesses");

                    b.Navigation("EndStations");

                    b.Navigation("MetroLineStations");

                    b.Navigation("StartStations");

                    b.Navigation("StrainSchedules");

                    b.Navigation("TicketRoutesAsFirstStation");

                    b.Navigation("TicketRoutesAsLastStation");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.SubscriptionTicket", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketRoute", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.TicketType", b =>
                {
                    b.Navigation("SubscriptionTickets");
                });

            modelBuilder.Entity("MetroTicketBE.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
